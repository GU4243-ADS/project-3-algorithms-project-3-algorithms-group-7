data_train <- read.csv("../data/eachmovie_sample/data_train.csv")
data_train <- read.csv("~/data/eachmovie_sample/data_train.csv")
data_train <- read.csv("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample/data_train.csv")
data_train <- as.data.frame(data_train[, -1])
data_train[is.na(data_train)] <- 0
rownames(data_train) <- data_train[, 1]
data_train <- read.csv("~/Downloads/movie_train.csv")
data_train <- as.data.frame(data_train[, -1])
data_train[is.na(data_train)] <- 0
rownames(data_train) <- data_train[, 1]
data_train <- as.data.frame(data_train[, -1])
movie.index <- substring(names(data_train), 7)
colnames(data_train) <- 1:ncol(data_train)
data <- rep(NA, nrow(data_train))
for (i in 1:6) {
dat <- data_train
dat[dat == i] <- 1
dat[dat != i] <- 0
data <- cbind(data, dat)
}
data <- data[, -1]
c <- 9
rand_mu <- runif(c, min = 0, max = 1)
mu_inits <- rand_mu / sum(rand_mu)
rand <- runif(c * 6 * ncol(data_train), min = 0, max = 1)
ar <- array(rand, dim = c(c,  ncol(data_train), 6))
arr <- matrix(rep(NA, ncol(data_train)), ncol = ncol(data_train), nrow =
1)
for (i in 1:c) {
arr_i <- t(ar[i, , ] / rowSums(ar[i, , ]))
arr <- rbind(arr, arr_i)
}
gamma_inits <- arr[-1, ]
View(gamma_inits)
load("/Users/djparker/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc/Cluster/gamma_em_result_9.RData")
load("/Users/djparker/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc/Cluster/mu_em_result_9.RData")
setwd("/Users/djparker/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc/Cluster")
load("mv.test.matrix.Rdata")
load("mv.train.matrix.Rdata")
data_test <- read.csv("../data/eachmovie_sample/data_test.csv")
data_test <- read.csv("/Users/djparker/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample/data_test.csv")
data_train <- read.csv("~/Downloads/movie_train.csv")
data_train <- as.data.frame(data_train[, -1])
data_train[is.na(data_train)] <- 0
rownames(data_train) <- data_train[, 1]
data_train <- as.data.frame(data_train[, -1])
movie.index <- substring(names(data_train), 7)
colnames(data_train) <- 1:ncol(data_train)
data <- rep(NA, nrow(data_train))
for (i in 1:6) {
dat <- data_train
dat[dat == i] <- 1
dat[dat != i] <- 0
data <- cbind(data, dat)
}
data <- data[, -1]
c <- 9
rand_mu <- runif(c, min = 0, max = 1)
mu_inits <- rand_mu / sum(rand_mu)
# Gamma
rand <- runif(c * 6 * ncol(data_train), min = 0, max = 1)
ar <- array(rand, dim = c(c,  ncol(data_train), 6))
arr <- matrix(rep(NA, ncol(data_train)), ncol = ncol(data_train), nrow = 1)
for (i in 1:c) {
arr_i <- t(ar[i, , ] / rowSums(ar[i, , ]))
arr <- rbind(arr, arr_i)
}
gamma_inits <- arr[-1, ]
output <- EM(data, data_train, mu_inits, gamma_inits, c)
### Expection Step ###
expectation <- function(mu, gamma, matrixk, c) {
theta <- NULL
N <- nrow(matrixk)
for (i in 1:c) {
gamma_c <- gamma[((i - 1) * 6 + 1):(6 * i), ]
gamma_c <- as.vector(t(gamma_c))
gamma_c <- matrix(rep(gamma_c, each = N), nrow = N)
Di <- matrixk * gamma_c
theta_i <- apply(Di, 1, function(x) {
return(prod(x[x > 0]))
})
names(theta_i) <- NULL
theta <- rbind(theta, theta_i)
}
mu_repeat <- matrix(rep(mu, each = N), nrow = N)
upper <- t(mu_repeat) * theta
sum <- colSums(upper, na.rm = TRUE)
lower <- matrix(rep(sum, each = c), nrow = c)
pi <- upper / lower
pi[is.na(pi)] <- 10 ^ (-100)
return(pi)
}
### Maximization Step ###
maximization <- function(pi, matrixk, c) {
N <- ncol(matrixk)
# Estimate mu
mu <- rowSums(pi, na.rm = TRUE) / ncol(pi)
# Estimate gamma
summation <- rowSums(pi, na.rm = TRUE)
lower <- matrix(rep(summation, each = N), nrow = N)
gamma_temp <- NULL
for (k in 1:6) {
data <- as.matrix(matrixk)
data[data != k] <- 0
data[data == k] <- 1
upper <- pi %*% data
gamma_k <- upper / t(lower)
gamma_k <- as.vector(t(gamma_k))
gamma_temp <- rbind(gamma_temp, gamma_k)
} # End of gamma calculation for each k
gamma <- NULL
for (i in 1:c) {
temp <- gamma_temp[, ((i - 1) * N + 1):(i * N)]
gamma <- rbind(gamma, temp)
}
mu[is.na(mu)] <- 10 ^ (-100)
gamma[is.na(gamma)] <- 10 ^ (-100)
re <- list(mu, gamma)
return(re)
}
### Expectation Maximization Algorithm ###
EM <-
function(data,
matrixk,
mu_inits,
gamma_inits,
c,
maxit = 100,
tol = 1e-5)
{
# Initial estimation of parameters
flag <- 0
mu_cur <- mu_inits
gamma_cur <- gamma_inits
# Iterate between expectation and maximization steps
for (i in 1:maxit) {
cur <- c(mu_cur, gamma_cur)
new <- maximization(expectation(mu_cur, gamma_cur, data, c), matrixk, c)
mu_new <- new[[1]]
gamma_new <- new[[2]]
new_step <- c(mu_new, gamma_new)
# Stop iteration if the difference between current and
# new estimates is less than a tolerance level
if (all(abs(cur - new_step) < tol)) {
flag <- 1
break
}
# Otherwise, continue iteration
mu_cur <- mu_new
gamma_cur <- gamma_new
}
if (!flag)
warning("Didn't converge\n")
em <- list(mu_cur, gamma_cur)
return(em)
}
start_time <- Sys.time()
output <- EM(data, data_train, mu_inits, gamma_inits, c)
start_time <- Sys.time()
r <- prediction(gamma_em_result, mu_em_result, test, data_test, 9)
"~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/"
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc")
# Original project data
data_train <- read.csv("../data/eachmovie_sample/data_train.csv")
movietrain = data_train[,-1]
nrow_movie = length(unique(movietrain[,2]))
ncol_movie = length(unique(movietrain[,1]))
movie.train.matrix = matrix(NA, nrow = nrow_movie, ncol = ncol_movie)
movie.train.matrix = reshape(movietrain, idvar = "User", timevar = "Movie", direction = "wide")
write.csv(movie.train.matrix,"../output/movie_train.csv", na="")
load("../output/mv.test.matrix.Rdata")
load("../outputmv.train.matrix.Rdata")
load("../output/mv.test.matrix.Rdata")
load("../output/mv.train.matrix.Rdata")
# Original project data
data_test <- read.csv("../data/eachmovie_sample/data_test.csv")
data_train <- read.csv("../data/eachmovie_sample/data_train.csv")
movie.test.matrix = reshape(data_test, idvar = "User", timevar = "Movie", direction = "wide")
write.csv(movie.test.matrix, "../output/movie_test.csv", na = "")
rownames(movie.test.matrix) <- movie.test.matrix[, 1]
movie.test.matrix <- movie.test.matrix[, -1]
movie.test.col <- colnames(movie.test.matrix)
movietrain = data_train[, -1]
movie.train.matrix = reshape(movietrain, idvar = "User", timevar = "Movie", direction = "wide")
rownames(movie.train.matrix) <- movie.train.matrix[, 1]
movie.train.matrix <- movie.train.matrix[, -1]
movie.train.col <- colnames(movie.train.matrix)
common <- intersect(movie.train.col, movie.test.col)
train.col <- match(common, movie.train.col)
test.col <- match(common, movie.test.col)
new.matrix <- matrix(NA,
nrow = nrow(movie.train.matrix),
ncol = ncol(movie.train.matrix))
for (i in 1:length(common)) {
a <- train.col[i]
b <- test.col[i]
new.matrix[, a] <- movie.test.matrix[, b]
new.matrix[, i]
}
rownames(new.matrix) <- rownames(movie.train.matrix)
colnames(new.matrix) <- colnames(movie.train.matrix)
write.csv(new.matrix, "../output/movie_test_train_new.csv", na = "")
# ~/Downloads/movie_train.csv" is the output of `data_clean.Rmd`.
data_train <- read.csv("../output/movie_train.csv")
# "~/Downloads/movie_test_train_new.csv" is the output of `train_test_data_preprocessing.Rmd`.
test <- read.csv("../output/movie_test_train_new.csv", header = TRUE)
# Train data processing
data_train <- as.data.frame(data_train[, -1])
data_train[is.na(data_train)] <- 0
rownames(data_train) <- data_train[, 1]
data_train <- as.data.frame(data_train[, -1])
colnames(data_train) <- 1:ncol(data_train)
# Test data processing
rownames(test) <- test[, 1]
test <- test[, -1]
test[is.na(test)] <- 0
data_test <- rep(NA, nrow(test))
for (i in 1:6) {
dat_test <- test
dat_test[dat_test == i] <- 1
dat_test[dat_test != i] <- 0
data_test <- cbind(data_test, dat_test)
}
data_test <- data_test[, -1]
load("../output/gamma_em_result_9.RData")
load("../output/mu_em_result_9.RData")
prediction <- function(gamma, mu, matrixtest, matrixk, c) {
gamma <- gamma_em_result
mu <- mu_em_result
matrixtest <- test
matrixk <- data_test
c <- 9
k <- 6
theta <- NULL
N <- nrow(data_train)
for (i in 1:c) {
gamma_c <- gamma[((i - 1) * 6 + 1):(6 * i), ]
gamma_c <- as.vector(t(gamma_c))
gamma_c <- matrix(rep(gamma_c, each = N), nrow = N)
Di <- matrixk * gamma_c
theta_i <- apply(Di, 1, function(x) {
return(prod(x[x > 0]))
})
names(theta_i) <- NULL
theta <- rbind(theta, theta_i)
print(i)
}
# Calculate lower
mu_repeat <- matrix(rep(mu, each = N), nrow = N)
prodre <- t(mu_repeat) * theta
sum <- colSums(prodre, na.rm = TRUE)
lower <-
matrix(rep(sum, each = ncol(matrixtest)),
ncol = ncol(matrixtest),
byrow = TRUE)
# Calculate upper
matrixsum <- matrix(rep(0, 5055 * 1619), ncol = 1619, nrow = 5055)
pp<-NULL
for (i in 1:k) {
data <- as.matrix(matrixtest)
data[data != i] <- 0
data[data == i] <- 1
for (j in 1:c) {
mu_iter <- mu[j]
theta_iter <- theta[j, ]
theta_iter <-
matrix(rep(t(theta_iter), each = ncol(matrixtest)),
ncol = ncol(matrixtest),
byrow = TRUE)
gamma_iter <- gamma[(6 * (j - 1) + i), ]
gamma_me <- matrix(rep(gamma_iter, each = N), nrow = N)
prob <- data * gamma_me
prob <- mu_iter * prob
prob <- prob * theta_iter
matrixsum <- matrixsum + prob
pp_k <- matrixsum / lower
pp_k <- t(as.vector(t(pp_k)))
print(j)
} # End of c interaction
pp <- rbind(pp, pp_k)
print(i)
} # End of k interaction
mm <- apply(pp, 2, which.max)
result <- matrix(mm, ncol = ncol(matrixtest), byrow = TRUE)
return(result)
}
start_time <- Sys.time()
r <- prediction(gamma_em_result, mu_em_result, test, data_test, 9)
end_time <- Sys.time()
prediction_time <- end_time - start_time
write.csv(r, file = "../output/predict.csv")
i-3
i <- 3
k_val_message <- paste("k value:", i)
print(k_val_message)
c_val_message <- paste("c value:", j)
j=2
c_val_message <- paste("c value:", j)
print(c_val_message)
prediction_time
pred_time_message <- paste("Prediction time:", prediction_time)
pred_time_message
print(prediction_time)
