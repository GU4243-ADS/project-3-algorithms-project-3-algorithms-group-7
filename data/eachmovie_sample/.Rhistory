K <- 5
err_cv <- array(dim = c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat, label_train, model_values[k], K)
}
warnings()
plot(model_values, err_cv[,1], xlab = "Interaction Depth", ylab = "CV Error",
main = "Cross Validation Error", type = "n", ylim = c(0, 0.25))
points(model_values, err_cv[,1], col = "blue", pch=16)
lines(model_values, err_cv[,1], col = "blue")
arrows(model_values, err_cv[,1] - err_cv[,2], model_values, err_cv[,1] + err_cv[,2],
length = 0.1, angle = 90, code = 3)
err_cv[,1]
err_cv
model_best <- model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[, 1])]
}
par_best <- list(depth = model_best)
model_best <- model_values[which.min(err_cv[, 1])]
par_best <- list(depth = model_best)
par_best
tm_train <- NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
tm_train <- NA
tm_train <- system.time(fit_train <- train(dat, label_train, par_best))
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample")
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
users  <- sort(unique(movie_train$User))
movies <- sort(unique(movie_train$Movie))
UI            <- matrix(NA, nrow = length(users), ncol = length(movies))
row.names(UI) <- users
colnames(UI)  <- movies
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
ord     <- order(movies)
movies  <- movies[ord]
ratings <- ratings[ord]
system.time(UI[1, colnames(UI) %in% movies] <- ratings)
long.in <- function(movies, ratings) {
# Cycle through the ratings, find the corresponding column
for (i in 1:length(ratings)) {
column <- which(colnames(UI) == movies[i])
UI[2, column] <- ratings[i]
print(column)
}
}
system.time(long.in(movies, ratings))
all(UI[1, ] == UI[2,], na.rm = TRUE)
movie_UI <- movie_data_transform(movie_train)
save(movie_UI, file = "movie_UI.RData")
source('~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc/memory_based_model.R', echo=TRUE)
source('~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/doc/memory_based_model.R', echo=TRUE)
movie_UI         <- as.matrix(movie_UI)
movie_sim_weight <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
rowA <- movie_UI[1, ]
rowB <- movie_UI[2, ]
cor(rowA, rowB, method = 'spearman', use = "pairwise.complete.obs")
rowA <- movie_UI[1, ]
rowB <- movie_UI[2, ]
cor(rowA, rowB, method = 'vector', use = "pairwise.complete.obs")
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/lib")
source("functions.R")
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample")
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
head(MS_train)
MS_train <- MS_train[, 2:4]
head(MS_train)
a <- MS_train$V2[MS_train$V1 == 'C']
head(a)
length(a)
a <- unique(MS_train$V2[MS_train$V1 == 'C'])
length(a)
head(a)
a <- sort(unique(MS_train$V2[MS_train$V1 == 'C']))
length(a)
vroots <- MS_train$V2[MS_train$V1 == 'V']
head(vroots)
length(vroots)
vroots <- unique(MS_train$V2[MS_train$V1 == 'V'])
head(vroots)
length(vroots)
vroots <- sort(unique(MS_train$V2[MS_train$V1 == 'V']))
head(vroots)
users  <- sort(unique(MS$V2[MS$V1 == "C"]))
users <- sort(unique(MS_train$V2[MS_train$V1 == 'C']))
nu <- length(users)
nv <- length(vroots)
UI            <- matrix(0, nrow = nu, ncol = nv)
dim(UI)
head(UI)
?row.names
row.names(UI) <- users
head(row.names(UI))
colnames(UI) <- vroots
head(colnames(UI))
head(UI)
head(MS_train)
user_loc <- which(MS_train$V1 == 'C')
head(user_loc)
head(MS_train,9)
head(nv)
head(nu)
head(row.names(UI))
a<-MS_train$V2(MS_train[1000:1004])
a<-MS_train$V2[1000:1004]
a
head(user_locs)
user_locs <- which(MS_train$V1 == "C")
head(user_locs)
for (i in 1:nu) {
name     <- MS_train$V2[user_locs[i]]
this_row <- which(row.names(UI) == name)
# Find the vroots
if (i == nu) {
v_names <- MS_train$V2[(user_locs[i] + 1):nrow(MS)]
} else {
v_names <- MS_train$V2[(user_locs[i] + 1):(user_locs[i+1] - 1)]
}
# Place the 1's
UI[this_row, colnames(UI) %in% v_names] <- 1
}
return(UI)
for (i in 1:nu) {
name     <- MS_train$V2[user_locs[i]]
this_row <- which(row.names(UI) == name)
# Find the vroots
if (i == nu) {
v_names <- MS_train$V2[(user_locs[i] + 1):nrow(MS_train)]
} else {
v_names <- MS_train$V2[(user_locs[i] + 1):(user_locs[i+1] - 1)]
}
# Place the 1's
UI[this_row, colnames(UI) %in% v_names] <- 1
}
return(UI)
for (i in 1:nu) {
name     <- MS_train$V2[user_locs[i]]
this_row <- which(row.names(UI) == name)
# Find the vroots
if (i == nu) {
v_names <- MS_train$V2[(user_locs[i] + 1):nrow(MS_train)]
} else {
v_names <- MS_train$V2[(user_locs[i] + 1):(user_locs[i+1] - 1)]
}
# Place the 1's
UI[this_row, colnames(UI) %in% v_names] <- 1
}
head(UI)
load(/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample/MS_UI.RData)
load('/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample/MS_UI.RData')
head(load('/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample/MS_UI.RData'))
head(get(load('/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample/MS_UI.RData')))
dim(MS_UI)
head(MS_UI)
?rowSums
visit_nums <- rowSums(MS_UI != 0)
visit_nums
no_visit_nums <- rowSums(MS_UI == 0)
no_visit_nums
a <- rowSums(MS_UI[5:] != 0)
MS_UI[5:]
MS_UI(5:)
a <- rowSums(MS_UI[5,] != 0)
a <- rowSums(MS_UI[5,:] != 0)
MS_UI[5,]
rowSums(MS_UI[5,])
head(MS_UI)
rowSums(MS_UI[5:6,])
rowSums(MS_UI[5:5,])
rowSums(MS_UI[5:7,])
MS_UI[5,]
rowSums(MS_UI[5,])
rowSums(MS_UI[5:6,])
MS_UI[5:6,]
MS_UI[5:6,] != 0
rowSums(MS_UI[5:6,] != 0)
rowSums(MS_UI[5:6,] == 0)
visit_nums <- rowSums(MS_UI)
visit_nums
sum(visit_nums)
visit_nums_o <- rowSums(MS_UI != 0)
sum(visit_nums_o)
table(visit_nums)
visit_nums <- rowSums(MS_UI != 0)
table(visit_nums)
hist(visit_nums)
mean(visit_nums)
median(visit_nums)
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample")
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
head(movie_train)
movie_train <- movie_train[, 2:4]
head(movie_train)
users <- sort(unique(movie_train$User))
length(users)
movies <- sort(unique(movie_train$Movie))
length(movies)
UI            <- matrix(NA, nrow = length(users), ncol = length(movies))
dim(UI)
row.names(UI) <- users
head(row.names(UI))
colnames(UI)  <- movies
head(colnames(UI))
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample")
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
head(movie_train)
movie_train <- movie_train[, 2:4]
head(movie_train)
users  <- sort(unique(movie_train$User))
length(users)
movies <- sort(unique(movie_train$Movie))
length(movies)
UI            <- matrix(NA, nrow = length(users), ncol = length(movies))
dim(UI)
row.names(UI) <- users
head(row.names(UI))
length(row.names(UI))
colnames(UI)  <- movies
length(colnames(UI))
head(colnames(UI))
head(movie_train)
head(users)
users[2]
users[1]
movie_train$User == users[1]
head(movie_train)
movie_train$Movie[movie_train$User == users[1]]
movie_train[movie_train$Users == users[1]]
head(movie_train, 100)
head(movie_train, 390)
users[1]
movie_train[movie_train$User == 1]
movie_train[movie_train$User == '1']
movie_train[movie_train$User == 1]
movie_train[,movie_train$User == 1]
head(movie_train)
movie_train[movie_train[, 'User'] == 1, ]
movie_train[movie_train[, 2] == 1, ]
dim(movie_train)
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
dim(movie_train)
subset(movie_train, movie_train[, 2] == 1)
subset(movie_train, movie_train[, 'User'] == 1)
head(movie_train$User == users[1])
movie_train[movie_train$User == users[1]]
movie_train[movie_train[,movie_train$User] == users[1]]
movie_train[movie_train[,'User'] == users[1]]
movie_train[movie_train[ ,'User'] == users[1], ]
head(movie_train$User)
head(movie_train$User == 1)
movie_train$User
head(movie_train$User == 1)
head(movie_train$Movie)
movie_train$Movie[movie_train$User == 1]
movie_train$Score[movie_train$User == 1]
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
ord     <- order(movies)
length(ord)
head(ord)
head(movies)
head(ord(movies))
head(order(movies))
head(movies)
movies[ord]
movies  <- movie_train$Movie[movie_train$User == users[1]]
head(movies, 100)
ord     <- order(movies)
head(ord, 100)
?order
head(movies[ord], 100)
head(movie_train$User, 100)
head(movie_train$User == 1)
head(movie_train$User == 1, 100)
head(movie_train$Score[movie_train$User == users[1]], 100)
ratings <- movie_train$Score[movie_train$User == users[1]]
head(ord, 1000)
ord
head(ratings, 100)
length(ratings)
ratings <- ratings[ord]
head(ratings)
ratings
UI[1, colnames(UI) %in% movies] <- ratings
UI
UI[1,]
dim(UI)
length(colnames(UI))
length(ratings)
movies  <- movie_train$Movie[movie_train$User == users[1]]
length(movies)
ratings <- movie_train$Score[movie_train$User == users[1]]
length(ratings
)
ord     <- order(movies)
length(ord)
movies  <- movies[ord]
length(movies)
movies[ord]
ratings <- ratings[ord]
ratings
colnames()
colnames(UI)
head(movie_train)
movies <- sort(unique(movie_train$Movie))
length(movies)
head(movies, 10)
movies
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
ord     <- order(movies)
movies  <- movies[ord]
ratings <- ratings[ord]
system.time(UI[1, colnames(UI) %in% movies] <- ratings)
UI
UI[1,]
users  <- sort(unique(movie_train$User))
movies <- sort(unique(movie_train$Movie))
UI            <- matrix(NA, nrow = length(users), ncol = length(movies))
row.names(UI) <- users
colnames(UI)  <- movies
length(movies)
length(users)
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
ord     <- order(movies)
movies  <- movies[ord]
ratings <- ratings[ord]
length(ratings)
movies
ratings
movies[2]
movies[3]
colnames(UI)
which(colnames(UI) == movies[3])
ratings
ratings[3]
column <- which(colnames(UI) == movies[3])
column
UI[2, column] <- ratings[3]
print(column)
UI[2,]
UI[1,]
?all
movie_UI <- movie_data_transform(movie_train)
head(movie_UI, 100)
movie_UI
head(get(load('/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample/movie_UI.RData')))
table(total_ratings)
mean(total_ratings)
median(total_ratings)
movie_UI
total_ratings <- rowSums(movie_UI, na.rm = TRUE)
total_ratings
head(users, 100)
head(movies, 100)
total_ratings <- rowSums(movie_UI, na.rm = TRUE)
total_ratings
mean(total_ratings)
median(total_ratings)
movie_UI         <- as.matrix(movie_UI)
movie_sim_weight <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
dim(movie_UI)
dim(movie_sum_weight)
dim(movie_sim_weight)
rowA <- movie_UI[1, ]
rowB <- movie_UI[2, ]
rowA
rowB
cor(rowA, rowB, method = 'pearson', use = "pairwise.complete.obs")
cor(rowA, rowB, method = 'spearman', use = "pairwise.complete.obs")
joint_values <- !is.na(rowA) & !is.na(rowB)
cor(rowA[joint_values], rowB[joint_values], method = 'spearman')
cor(rowA[joint_values], rowB[joint_values], method = 'pearson')
?apply
movie_UI
head(movie_UI)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
col.sums
row.sums <- apply(x, 1, sum)
row.sums
system.time(vec1 <- apply(movie_UI, 1, cor, movie_UI[1, ], method = 'pearson', use = "pairwise.complete.obs"))
vec1
?cpr
?cor
movie_UI
movie_UI[2,]
cor()
movie_UI[1, ]
vec1 <- apply(movie_UI, 1, cor, movie_UI[1, ], method = 'pearson', use = "pairwise.complete.obs")
vec1
movie_UI[1, ]
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
col.sums
x
row.sums <- apply(x, 1, sum)
row.sums
head(users, 100)
vec1
head(movie_sim, 10)
head(movie_sim, 2)
movie_sim[2,]
movie_sim[3,]
movie_sim[1,]
head(get(load('/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample/movie_sim.RData')))
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values
movie_sim[2,]
rowA
rowB
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values
nrow(movie_UI)
dim(movie_sim_weight)
dim(weight_mat)
?row.num
?row.num
dim(movie_UI)
dim(weight_mat)
weight_mat <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
dim(weight_mat)
vec1 <- apply(movie_UI, 1, cor, movie_UI[1, ], method = 'pearson', use = "pairwise.complete.obs")
vec1
weight_mat[1, ] <- vec1
weight_mat[1, ]
cor(rowA[joint_values], rowB[joint_values], method = 'pearson')
cor
pred_mat        <- MS_UI
head(MS_UI)
cols_to_predict <- which(MS_UI[1, ] == 0)
cols_to_predict
num_cols        <- length(cols_to_predict)
num_cols
neighb_weights <- MS_sim[1, ]
neighb_weights
row_avgs       <- apply(MS_UI, 1, mean, na.rm = TRUE)
row_avgs
dev_mat        <- MS_UI - matrix(rep(row_avgs, ncol(MS_UI)), ncol = ncol(MS_UI))
dev_mat
for (i in 1:num_cols) {
# For each column to predict, first find all deviations for that item
neighb_devs <- dev_mat[ ,cols_to_predict[i]]
# For each column to predict, calculate the prediction as the weighted average
pred_mat[1, cols_to_predict[i]] <- row_avgs[1] +  sum(neighb_devs * neighb_weights, na.rm = TRUE)/sum(neighb_weights, na.rm = TRUE)
}
pred_mat2 <- MS_UI
weight_mat  <- matrix(rep(neighb_weights, ncol(MS_UI)), ncol = ncol(MS_UI))
weight_sub  <- weight_mat[, cols_to_predict]
neighb_devs <- dev_mat[ ,cols_to_predict]
pred_mat2[1, cols_to_predict] <- row_avgs[1] +  apply(neighb_devs * weight_sub, 2, sum, na.rm = TRUE)/sum(neighb_weights, na.rm = TRUE)
pred_mat <- MS_UI
pred_mat[pred_mat == 0] <- NA
pred_mat
row_avgs <- apply(data, 1, mean, na.rm = TRUE)
row_avgs <- apply(MS_UI, 1, mean, na.rm = TRUE)
row_avgs
MS_sim
dim(MS_sim)
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/lib")
source("functions.R")
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample")
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
head(MS_train)
visit_nums <- rowSums(MS_UI != 0)
head(visit_nums)
visit_nums
table(visit_nums)
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample")
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
head(movie_train)
cor(rowA, rowB, method = 'vector', use = "pairwise.complete.obs")
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/lib")
source("functions.R")
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/MS_sample")
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4] # get rid of first column: row number
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "MS_UI.RData")
visit_nums <- rowSums(MS_UI != 0)
table(visit_nums)
mean(visit_nums)
median(visit_nums)
setwd("/Users/qinqingao/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-7/data/eachmovie_sample")
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4] # get rid of first column: row number
movie_UI <- movie_data_transform(movie_train)
save(movie_UI, file = "movie_UI.RData")
total_ratings <- rowSums(movie_UI, na.rm = TRUE)
table(total_ratings)
mean(total_ratings)
median(total_ratings)
movie_sim <- calc_weight(movie_UI)
MS_sim <- calc_weight(MS_UI)
MS_pred <- pred_matrix(MS_UI, MS_sim)
movie_pred <- pred_matrix(movie_UI, movie_sim)
